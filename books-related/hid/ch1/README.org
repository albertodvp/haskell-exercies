* Chapter 1 - Functions and types

In FP we stucture programs in terms of input and output (instead of focussing on the steps to get that output)

#+BEGIN_SRC haskell
  :module + Data.List Data.Char
  text <- readFile "../hid-examples-master/data/texts/hamlet.txt"
  ws = words $ map toLower text
  ws' = map (takeWhile isLetter . dropWhile (not . isLetter)) ws
  cleanedWords = filter (not . null) ws'
  uniqueWords = map head $ group $ sort cleanedWords
  putStrLn $ show $ take 7 uniqueWords
#+END_SRC


** Summary
- Try to keep pure functions and IO separated
- Use `Text` instead of `String`
- [[https://ro-che.info/articles/2016-04-02-descending-sort-haskell][Sorting reference]]
- Formatting references: [[https://hackage.haskell.org/package/interpolatedstring-perl6-1.0.2/docs/Text-InterpolatedString-Perl6.html][interpolatedstring-perl6]], [[https://hackage.haskell.org/package/fmt][fmt]], [[https://hackage.haskell.org/package/formatting][formatting]]  
