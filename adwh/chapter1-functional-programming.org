* Chapter 1 - Functional programming

** Notes:
- Haskell is a _lazy_ language: evaluations are performed only when needed
- Online vs offline algorithm:
  - online: one that processes a list wihtout having the entire list available from the start
  - offline: one that is giver the complete list to start with
- Inductive definitions are particular recursive function defined with 2 clauses:
  - empty list
  - x:xs clause, in terms of the value of the fuction(recursion) for xs
- Different solutions for problems arises simply because there are different but equally clear definitions of one or more of the basic functions describing the solution
- Reasoning:
  - point-wise: functions are fully applied to their arguments
  - point-free: composition is used to combine functions and functions are not fully applied
- Tupling: a computation could be made more efficient by tupling values of interest together and threading them through the computation
- Premature optimisation is the root of all evil in programming.
- Two central principles of good algorithm design:
  1. formulate the problem in terms of basic well-understood ingredients
  2. fuse the components into a dish that is finally ready to leave the kitchen

h (foldr f e xs) = foldr g (h e) xs (fusion rule of foldr)
with
h (f x y) = g x (h y)  (fusion condition)

Base case:
  h (foldr f e []) =
  h e              =   { definition of foldr}
  foldr g (h e) [] =   { definition of foldr}


Inductive step:
  h (foldr f e (x:xs))   =  
  h (f x (foldr f e xs)) =  {foldr step}
  g x (h (foldr f e xs)) =  {fusion condition}
  g x (foldr g (h e) xs) =  {induction}
  foldr g (h e) (x:xs)      {foldr step}


** Exercises
*** 1.1
#+BEGIN_SRC haskell
maximum :: Ord a => [a] -> a
take :: Int -> [a] -> [a]
takeWhile :: (a -> Bool) -> [a] -> [a]
inits :: [a] -> [[a]]
splitAt :: Int -> [a] -> ([a], [a])
null :: [a] -> Bool
elem :: Eq a => a -> [a] -> Bool
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
minimum :: Ord a => [a] -> a
drop :: Int -> [a] -> [a]
dropWhile :: (a -> Bool) -> [a] -> [a]
tails :: [a] -> [[a]]
span ::(a -> Bool) -> [a] -> ([a],[a])
all :: (a -> Bool) -> [a] -> Bool
(!!) :: Int -> [a] -> a
#+END_SRC

*** 1.2
#+BEGIN_SRC haskell
uncons :: [a] -> Maybe (a, [a])
uncons []     = Nothing
uncons (x:xs) = Just (x, xs)
#+END_SRC

*** 1.3
#+BEGIN_SRC haskell
wrap :: a -> [a]
wrap x = [x] 

-- partial
unwrap :: [a] -> a
unwrap [x] = x

single :: [a] -> Bool
single [x] = True
single _ = False
#+END_SRC

*** 1.4
#+BEGIN_SRC haskell
reverse :: [a] -> [a]
reverse = foldl (flip (:)) []

#+END_SRC

*** 1.5
#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> [b]
map f = foldr ((:) . f) []

filter :: (a -> Bool) -> [a] -> [a]
filter f = foldr g [] where g x xs = if f x then x:xs else xs
#+END_SRC

*** 1.6
filter p = foldr g [] where g x xs = if p x then x:xs else xs

#+BEGIN_SRC haskell
h = foldr f e . filter p
i = foldr g e where g x axs = if p x then f x y else axsy
-- h = i
#+END_SRC

*** 1.7
#+BEGIN_SRC haskell
takeWhile :: (a -> Bool) -> [a] -> [a]
takeWhile f = foldr g [] where g x xs = if f x then x:xs else []
#+END_SRC

*** 1.8
#+BEGIN_SRC haskell
dropWhileEnd :: (a -> Bool) -> [a] -> [a]
dropWhileEnd f = foldr g [] 
  where 
    g x [] = if f x then [] else x:[]
    g x xs = x:xs
#+END_SRC

*** 1.9
#+BEGIN_SRC haskell
foldr f e xs = if null xs then e else f (head xs) (foldr f e (tail xs))
foldl f e xs = if null xs then e else f (foldl f e (init xs)) (last xs)
#+END_SRC
foldl must evaluate the whole list

*** 1.10
The operation must be associative with an identity element

This is true for all finite lists.

*** 1.11
#+BEGIN_SRC haskell
integer :: [Int] -> Int
-- cheaty ?
integer = read . concatMap show 
-- I assume I have at least 1 element
integer = let g xs x = xs * 10 + x in foldl1 g
#+END_SRC

*** 1.12
#+BEGIN_SRC haskell
map (foldl f e) . inits = scanl f e
map (foldr f e) . tails = scanr f e
#+END_SRC

*** 1.13
#+BEGIN_SRC haskell
apply :: Nat -> (a -> a) -> a -> a
apply 0 _ x = x
apply n f x = apply (n-1) f (f x)

-- of point free
apply :: Nat -> (a -> a) -> a -> a
apply 0 _ = id
apply n f = apply (n-1) f . f
#+END_SRC

*** TODO 1.14
Most of the inductive definitions can be written as instance of fold.

#+BEGIN_SRC haskell
-- inductive definition
perms :: [a] -> [[a]]
perms [] =  [[]]
perms (x:xs) = [zs | ys <- perms xs, zs <- inserts x ys]

inserts :: a -> [a] -> [[a]]
inserts x [] = [[x]]
inserts x (y:ys) = (x:y:ys): map (y:) (inserts x ys)

inserts' :: a -> [a] -> [[a]]
inserts' x = foldr g [[x]] 
  where 
    g y yss = (x:y:ys):map (y:) yss
              where ys = tail (head yss)
#+END_SRC

*** 1.15
I cannot generate the permutations of a list of function because this works with data with the instance of ~Eq~

#+BEGIN_SRC haskell
perms [] = [[]]
perms xs = [x:ys | x <- xs, ys <- perms (remove x xs)]

-- I can remove this since I am handling that case in the above function
-- remove x [] = []
remove x (y:ys) = if x == y then ys else y:remove x ys
#+END_SRC

*** TODO 1.16
*** TODO 1.17
*** TODO 1.18
*** 1.19
False. Haskell is lazy. ~labelsum~ doesn't compute anything before ~head~ is called. With the ~head~ call, only the first element of the list is computed
*** 1.20
#+BEGIN_SRC haskell
h = concat xss
g = foldl op id xss []
  where 
    op :: (a -> a) -> [b] -> (a -> a)
    op acc xs  = acc . (xs++)
#+END_SRC
*** 1.21
A list of number is said to be _steep_ if eatch number is greather than the sum of the elements following it.

#+BEGIN_SRC haskell
steep :: Ord a => [a] -> Bool

-- 0 quadratic
steep [] = True
steep (x:xs) = x > sum xs  && steep xs

-- 1 linear
steep = snd . hsteep
hsteep [] = (0, True)
hsteep (x:xs) = (x + n, x > n && a) where (n, a) = steep xs

-- 2 linear with monoids
import Data.Monoid
steep xs = getAll (f zs)
  where
    f = foldMap (All . uncurry (>)) 
    zs = zip xs $ tail (scanr (+) 0 xs)
-- foldr (&& . uncarry (>)) True
#+END_SRC
